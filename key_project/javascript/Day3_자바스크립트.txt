반복문

while문
while문은 특정 조건식을 만족하는 동안 계속해서 주어진 실행문을 반복합니다.

while(조건식) {
	조건식의 결과가 참인 동안 반복될 실행문;
}

do ~ while문
while문은 루트에 진입하기 전에 먼저 조건식부터 검사를 합니다. 하지만 do ~ while문은 먼저 루프를 
한 번 실행한 후에 조건식을 검사합니다.
do {
 	조건식의 결과가 참인 동안 반복될 실행문;
}while(조건식);

for 문
for문은 while문과 달리 자체적으로 초기값, 조건식, 증감식을 모두 포함하고 있는 반복문입니다.
while문 보다는 간결하게 반복을 표현할 수 있습니다.
for(초기값; 조건식; 증감식){
	조건식의 결과가 참인 동안 반복할 실행문;
}

예
for(var i=1; i<=5; i++) {
	document.write("안녕하세요<br>");
}
구구단  프로그램을 

continue 문
반복중인 루트 내에서 사용하여 해당 루프의 나머지 부분을 건너뛰고, 다음 조건식의 판단으로 넘어가게 합니다. 보통 반복문 내에서 특정 조건에 대한 처리를 제외하고자 할 떄 사용합니다.


break 문
반복중인 루프 내에서 사용하여 해당 반복문을 완전히 종료시키고 반복문 바로 다음에 위치한 실행문으로 프로그램의 흐름을 이동시킵니다. 루프 내에서 조건식의 판단 결과에 상관없이 반복문을 빠져나가고 싶을 때 사용합니다.

다중 for문
for문이 2개이상 겹쳐 있는 프로그램을 의미합니다.

for (초기값; 조건식1; 증감식) {
	조건식1의 결과가 참인 동안 반복될 실행문'
	for (초기값; 조건식2; 증감식){
		조건식2의 결과가 참인 동안 반복될 실행문;
	}
}
예)
for(var i=1; i<=3, i++){
	for(var j=1; j<=5; j++){
		document.write("안녕하세요<br>");
	}
} 

문제
아래와 같은 도형을 이중 for문으로 표현하여 작성(단, * 1개를 사용하여 표현)
1. 
* * * * *
* * * * *
* * * * *
* * * * *
* * * * *
2.
* * * * *
* * * * 
* * * 
* * 
* 
3.
* 
* * 
* * * 
* * * * 
* * * * *

내장 함수

문자열 함수
var str1 = "안녕하세요. javascript";
var str2 = '안녕하세요. javascript';
(자바스크립트에서는 문자열 쌍따옴표("") 또는 따옴표('')를 사용하여 저장합니다.)

length : 문자열의 길이가 저장되는 프로퍼티입니다.
예 ) str1.length -> 17

indexOf() : 특정 문자나 문자열이 처음으로 등장하는 위치를 리턴합니다. (index는 0번부터 시작)

charAt() : 특정 문자열에서 전달 받은 인덱스에 위치한 문자를 리턴합니다.

includes() : 특정 문자열에서 전달 받은 문자열이 포함되어 있는지 여부를 리턴합니다.

substring() : 전달받은 시작 인덱스부터 종료 인덱스 바로 앞까지 문자열을 추출하여 새로운 문자열을 리턴합니다.

substr() : 전달받은 시작 인덱스부터 전달받은 개수만큼 문자열을 추출하여 새로운 문자열을 리턴합니다.

split() : 구분자를 기준으로 나눈 후 나뉜 문자열을 하나의 배열에 저장합니다.
예)
var str3 = "안녕|반가워|나는|자바스크립트야";
var arr = str3.split("|");

안녕    반가워   나는   자바스크립트야
arr[0]    arr[1]     arr[2]     arr[3]

replace() : 원본 문자열의 일부를 전달받은 문자열로 치환합니다.

trim() : 문자열의 앞뒤 공백을 제거합니다.

toUpperCase() : 영문자 중 소문자를 모두 대문자로 변환합니다.
toLowerCase() : 영문자 중 대문자를 모두 소문자로 변환합니다.















